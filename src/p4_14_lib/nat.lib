#
# Title: nat.lib
# This P4 module implements a NAT function that does the link-layer
# modification at the switch's egress pipeline.
#

default_prefix = snat

/*
 * P4 module marcos
 */
add macro(TYPE_NSH, 0x894F)
add macro(TYPE_IPV4, 0x0800)
add macro(TYPE_NSH_IPV4, 0x01)
add macro(TYPE_TCP, 0x06)

/*
 * Header Definition Part
 */
#define Ethernet
#define NSH
#define IPv4

/*
 * Metadata Definition Part
 */
add metadata(do_forward, bit<1>)
add metadata(is_ext_if, bit<1>)
add metadata(if_index, bit<9>)
add metadata(add_NSH, bit<1>)
add metadata(ipv4_sa, bit<32>)
add metadata(ipv4_da, bit<32>)
add metadata(nhop_ipv4, bit<32>)
add metadata(if_ipv4_addr, bit<32>)
add metadata(if_mac_addr, bit<48>)
add metadata(srcPort, bit<16>)
add metadata(dstPort, bit<16>)
add metadata(pktlength, bit<16>)
add metadata(SPI, bit<24>)
add metadata(SI, bit<8>)

/*
 * P4 Header Parser Specification Part
 */
set Ethernet(etherType, 2, {TYPE_IPV4:IPv4, TYPE_NSH:NSH})
set NSH(nextProto, 1, {TYPE_NSH_IPV4: IPv4})
set IPv4(nextProto, 1, {TYPE_TCP: TCP})
set TCP(None, 0, {})
add parser( Ethernet )


/*
 * P4 MyIngress Part
 */
action _drop(){
	drop();
}

action set_if_info( ipv4_addr, mac_addr, is_ext){
	modify_field(metadata.if_ipv4_addr, ipv4_addr);
	modify_field(metadata.if_mac_addr, mac_addr);
	modify_field(metadata.is_ext_if, is_ext);
}

table if_info{
	reads {
		meta.if_index: exact;
	}
	actions{
		_drop;
		set_if_info;
	}
}

action nat_miss_ext_to_int(){
	modify_field(meta.do_forward, 0);
	drop();
}

action change_type(){
	modift_field(ethernet.etherType, ETHERTYPE_IPV4);
}

action change_nhop( addr){
	modify_field(meta.nhop_ipv4, addr);
	modify_field(meta.ipv4_da, addr);
	modify_field(ethernet.etherType, ETHERTYPE_NSH);
}

action nat_hit_int_to_ext(srcAddr, srcPort){
	modify_field(meta.do_forward, 1);
	modify_field(meta.ipv4_sa, srcAddr);
	modify_field(meta.srcPort, srcPort);
}

action nat_hit_ext_to_int(dstAddr, dstPort){
	modify_field(meta.do_forward, 1);
	modify_field(meta.ipv4_da, dstAddr);
	modify_field(meta.dstPort, dstPort);
}

action nat_no_nat(){
	modify_field(meta.do_forward, 1);
}

table nat{
	reads {
		meta.is_ext_if: exact;
		ipv4: valid;
		tcp: valid;
		ipv4_srcAddr: ternary;
		ipv4_dstAddr: ternary;
		meta.srcPort: ternary;
		meta.dstport: ternary;
	}
	actions {
		_drop;
		nat_miss_int_to_ext;
		nat_hit_int_to_ext;
		nat_hit_ext_to_int;
		nat_no_nat;
	}
}

action set_nhop(nhop_ipv4, port){
	modify_field(meta.nhop_ipv4, nhop_ipv4);
	modify_field(standard_metadata.egress_spec, port);
	add_to_field(ipv4.ttl, -1);
}

table ipv4_lpm{
	reads {
		meta.ipv4_da: lpm;
	}
	actions {
		set_nhop;
		_drop;
	}
}

action set_dmac(dmac){
	modify_field(ethernet.dstAddr, dmac);
}

table forward{
	reads {
		meta.nhop_ipv4: exact;
	}
	actions {
	    set_dmac;
	    _drop;
	}
}

/* egress action & table*/

action set_tcp(){
	modify_field(tcp.srcPort, meta.srcPort);
	modify_field(tcp.dstPort, meta.dstPort);
}

action do_rewrites(smac){
	modify_field(ethernet.srcAddr, smac);
	modify_field(ipv4.srcAddr, meta.ipv4_sa);
	modify_field(ipv4.dstAddr, meta.ipv4_da);
	set_tcp();
}

table send_frames{
	reads {
		standard_metadata.egress_port: exact;
	}
	actions {
		do_rewrites;
		_drop;
	}
}

action init_metadata(){
    
}

table init_meta{
    actions{ init_metadata;}
}

apply{
    apply(init_meta);
	apply(if_info);
	apply(nat);
	if(meta.do_forward == 1 && ipv4.ttl >0){
		apply(ipv4_lpm);
		apply(forward);
	}
	if(standard_metadata.instance_type == 0){
		apply(send_frame);
	}
}

/* Deparser */
deparser_seq = [TCP, IPv4, Ethernet]
add deparser(deparser_seq)
