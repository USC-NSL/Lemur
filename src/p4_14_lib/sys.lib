#
# Title: sys_default.lib
# This P4 module is the default module for every P4 pipeline.
# It contains common headers, metadata fields, actions and tables
# used by a Lemur P4 piepline (mostly for handling NSH header).
#

default_prefix = sys

/*
 * P4 module marcos
 */
add macro(BESS_PORT, 44)
add macro(CPU_PORT, 9)
add macro(TYPE_VLAN, 0x0810)
add macro(TYPE_NSH, 0x894F)
add macro(TYPE_NSH_IPV4, 0x1)
add macro(TYPE_NSH_VLAN, 0x6)
add macro(TYPE_IPV4, 0x0800)
add macro(TYPE_IPV6, 0x0816)

/*
 * Header Definition Part
 */
#define Ethernet
#define VLAN
#define NSH
#define IPv4
#define IPv6

/*
 * Metadata Definition Part
 */
add metadata(service_path_id, 24)
add metadata(service_id, 8)
add metadata(forward_flag, 4)
add metadata(controller_flag, 4)
add metadata(nsh_flag, 4)
add metadata(drop_flag, 4)

/*
 * P4 Header Parser Specification Part
 */
set Ethernet(etherType, 4, {TYPE_IPV4:IPv4, TYPE_IPV6:IPv6, TYPE_NSH:NSH, TYPE_VLAN:VLAN })
set VLAN(nextType, 1, {TYPE_IPV4:IPv4})
set IPv4(None, 0, {})
set IPv6(None, 0, {})
set NSH(nextProto, 2, {TYPE_NSH_IPV4:IPv4, TYPE_NSH_VLAN:VLAN})
add parser( Ethernet )


# Ingress
/*
action init_metadata() {
	modify_field(meta.service_path_id, 0);
	modify_field(meta.service_id, 1);
	modify_field(meta.forward_flag, 0);
	modify_field(meta.controller_flag, 0);
	modify_field(meta.nsh_flag, 0);
	modify_field(meta.drop_flag, 0);
}

table init_metadata_apply {
	actions { init_metadata; }
	default_action : init_metadata;
	size : 0;
}
*/

action send_to_bess() {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, BESS_PORT);
}

table send_to_bess_apply {
    actions { send_to_bess; }
    default_action : send_to_bess();
    size : 0;
}

action send_to_controller() {
    // modify_field(ig_intr_md_for_tm.ucast_egress_port, CPU_PORT);
    modify_field(ig_intr_md_for_tm.copy_to_cpu, 1);
}

table send_to_controller_apply {
    actions { send_to_controller; }
    default_action : send_to_controller();
    size : 0;
}

action pdrop() {
	drop();
}

table drop_apply {
	actions { pdrop; }
	default_action : pdrop();
	size : 0;
}

action set_drop_flag() {
	modify_field(meta.drop_flag, 1);
}

table set_drop_flag_apply {
	actions { set_drop_flag; }
	default_action : set_drop_flag();
	size : 0;
}

action valid_nsh_header() {
    add_header(nsh);
    setup_nsh_header();
    modify_field(meta.service_id, 0);
}

action handle_next_proto_vlan() {
    modify_field(ethernet.etherType, TYPE_NSH);
    modify_field(nsh.nextProto, TYPE_NSH_VLAN); // VLAN
}

action handle_next_proto_ipv4() {
    modify_field(ethernet.etherType, TYPE_NSH);
    modify_field(nsh.nextProto, TYPE_NSH_IPV4); // IPv4
}

action setup_nsh_header() {
    modify_field(nsh.version, 0);
    modify_field(nsh.oBit, 0);
    modify_field(nsh.uBit, 0);
    modify_field(nsh.ttl, 63);
    modify_field(nsh.totalLength,0x6);
    modify_field(nsh.unsign, 0);
    modify_field(nsh.md, 0x1); // fixed length
    modify_field(nsh.spi, meta.service_path_id);
    modify_field(nsh.si, meta.service_id);
    modify_field(nsh.context, 0x1234);
}

table valid_nsh_header_apply {
    actions { valid_nsh_header; }
    default_action : valid_nsh_header();
    size : 0;
}

table handle_next_proto_vlan_apply {
    actions { handle_next_proto_vlan; }
    default_action : handle_next_proto_vlan();
    size : 0;
}

table handle_next_proto_ipv4_apply {
    actions { handle_next_proto_ipv4; }
    default_action : handle_next_proto_ipv4();
    size : 0;
}

action remove_nsh_header() {
    modify_field(meta.service_path_id, nsh.spi);
    modify_field(meta.service_id, nsh.si);
    modify_field(ethernet.etherType, TYPE_IPV4);
    remove_header(nsh);
}

table remove_nsh_header_apply {
    actions { remove_nsh_header; }
    default_action : remove_nsh_header();
    size : 0;
}

apply {
	apply(set_drop_flag_apply);
}

# Egress

# Deparser
deparser_seq = [IPv4, Ethernet]
add deparser( deparser_seq )
