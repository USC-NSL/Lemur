#
# Title: silkroad.lib
# This P4 module is a naive implementation of SilkRoad load balancer.
# SilkRoad [SIGCOMM 17'] is the first load balancer that ensures
# per-connection consistency in a programmable switch.
#
# This implementation does not compress rules. Therefore, it cannot
# serve millions of connections. Please see the full paper to see
# the comprehensive-implementation of SilkRoad LB.
#

default_prefix = silkroad

/*
 * P4 module marcos
 */
add macro(CONN_TABLE_SIZE, 50)
add macro(VIP_TABLE_SIZE, 50)
add macro(DIP_POOL_TABLE_SIZE, 50)
add macro(TYPE_IPV4, 0x0800)
add macro(TYPE_IPV6, 0x0816)
add macro(TYPE_TCP, 0x06)
add macro(TYPE_UDP, 0x11)

/*
 * Header Definition Part
 */
#define Ethernet
#define NSH
#define IPv4
#define TCP
#define UDP

/*
 * Metadata Definition Part
 */
add metadata(conn_table_miss_flag, 4)
add metadata(vip_table_miss_flag, 4)
add metadata(dip_pool_table_miss_flag, 4)
add metadata(vipAddr, 32)
add metadata(dipAddr, 32)
add metadata(dip_pool_version, 32)
add metadata(dip_select, 14)

/*
 * P4 Header Parser Specification Part
 */
set Ethernet(etherType, 2, {TYPE_IPV4:IPv4, TYPE_IPV6:IPv6 })
set IPv4(protocol, 2, {TYPE_TCP:TCP, TYPE_UDP:UDP})
set IPv6(None, 0, {})
set NSH(None, 0, {})
set TCP(None, 0, {})
set UDP(None, 0, {})
add parser( Ethernet )


# FIELD START
field_list flow_tuple {
	ipv4.srcAddr;
	ipv4.dstAddr;
	ipv4.protocol;
	tcp.srcPort;
	tcp.dstPort;
}

field_list_calculation flow_calc {
	input {
		flow_tuple;
	}
	algorithm {
		crc16;
	}
	output_width : 14;
}
# FIELD END

/*
 * Ingress Match/Action Table Part
 */

action drop() {
	modify_field(meta.drop_flag, 1);
}

table drop_apply {
	actions { drop; }
	default_action : drop;
	size : 0;
}

action init_metadata() {
}

table init_metadata_apply {
	actions { init_metadata; }
	default_action : init_metadata;
	size : 0;
}

action conn_table_hit(dipAddr) {
    modify_field(meta.conn_table_miss_flag, 0);
	modify_field(ipv4.dstAddr, dipAddr);
}

action conn_table_miss() {
    modify_field(meta.conn_table_miss_flag, 1);
    modify_field(meta.controller_flag, 1);
}

table conn_table {
	reads {
		ipv4.srcAddr: exact;
		ipv4.dstAddr: exact;
	}
	actions {
		conn_table_hit;
		conn_table_miss;
	}
	default_action : conn_table_miss();
	size : CONN_TABLE_SIZE;
}

/*
	vip_table_hit: it generates a hash for the flow's 5-tuple.
	The hash is stored in meta.dip_select.
	(dip_version decides which version of dip_pool_table to look at)
*/

action calc_hash() {
	modify_field_with_hash_based_offset(meta.dip_select, 0, flow_calc, 16384);
}

action vip_table_hit( dip_version ) {
	modify_field(meta.vipAddr, ipv4.dstAddr);
	modify_field(meta.dip_pool_version, dip_version);
	calc_hash();
    modify_field(meta.vip_table_miss_flag, 0);
}

action vip_table_miss() {
    modify_field(meta.vip_table_miss_flag, 1);
    drop();
}

table vip_table {
	reads {
		ipv4.dstAddr: exact;
	}
	actions {
		vip_table_hit;
		vip_table_miss;
	}
	default_action : vip_table_miss;
	size : VIP_TABLE_SIZE;
}

# dip_pool_table_hit stores the dipAddr result into the meta data field
action dip_pool_table_hit(dipAddr) {
	modify_field(meta.dipAddr, dipAddr);
    modify_field(meta.dip_pool_table_miss_flag, 0);
}

action dip_pool_table_miss() {
    modify_field(meta.dip_pool_table_miss_flag, 1);
    drop();
}

table dip_pool_table {
	reads {
		meta.vipAddr: exact;
		meta.dip_pool_version: exact;
		meta.dip_select: exact;
	}
	actions {
		dip_pool_table_hit;
		dip_pool_table_miss;
	}
	default_action : dip_pool_table_miss;
	size : DIP_POOL_TABLE_SIZE;
}

apply {
	apply(conn_table);
    if( meta.conn_table_miss_flag == 1 ) {
        apply(vip_table);
    	if (meta.vip_table_miss_flag == 0) {
    		apply(dip_pool_table);
    	}
    }
}

/*
 * Egress Match/Action Table Part
 */


/*
 * P4 Header Deparser Specification Part
 */
deparser_seq = [UDP, TCP, IPv4, NSH, Ethernet]
add deparser( deparser_seq )
