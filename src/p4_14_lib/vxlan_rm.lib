#
# P4 module name: vxlan_rm.lib
# This P4 module is to remove vxlan header on top of original Ethernet
# frame. VXLAN is commonly used to tunnel the traffic at VLAN Tunnel
# Endpoint (VTEP). 
# This implementation removes the outer ethernet, outer ipv4, outer udp
# and vxlan.
#

default_prefix = vxlan_rm

/*
 * P4 module marcos
 */
add macro(ETHERTYPE_IPV4, 0x0800)
add macro(ETHERTYPE_VLAN, 0x8100)
add macro(VTEP, 0xffffffffffff)
add macro(IP_PROT_TCP, 0x06)
add macro(IP_PROT_UDP, 0x11)
add macro(VXLAN_PORT, 4789)

/*
 * Header Definition Part
 */
#define Ethernet
#define VXLAN
#define IPv4
#define UDP
#define TCP


/* 
 * Metadata Definition Part
 */


/*
 * P4 Header Parser Specification Part
 */
set Ethernet(dstAddr, 2, {VTEP:IPv4, DEFAULT: Inner_IPv4})
set Inner_IPv4(protocol, 1, {IP_PROT_TCP: TCP})
set TCP(None, 0, {})
set IPv4(protocol, 1, {IP_PROT_UDP: UDP})
set UDP(dstPort, 1, {VXLAN_PORT: Vxlan})
set Vxlan(None, 1, {Inner_ethernet})
set Inner_ethernet(etherType, 1, {ETHERTYPE_IPV4: Inner_IPv4})
add parser( Ethernet )

# MyIngress

action do_VXLAN_decap() {
    modify_field(ethernet.srcAddr, inner_ethernet.srcAddr);
    modify_field(ethernet.dstAddr, inner_ethernet.dstAddr);
    modify_field(ethernet.etherType, inner_ethernet.etherType);
    remove_header(vxlan);
    remove_header(udp);
    remove_header(ipv4);
    remove_header(inner_ethernet);
}

table rm_vxlan {
	actions {
		do_VXLAN_decap;
	}
}

action init_metadata() {
}

apply {
	// First, we need to initialize the metadata field
	init_metadata();

	// Second, modify the packet header fields/metadata fields according to our needs
    if(ethernet.dstAddr == VTEP){
	    apply(rm_vxlan);
    }

}

# MyEgress


/*
 * P4 Header Deparser Specification Part
 */
deparser_seq = [Inner_Ipv4, Ethernet]
add deparser( deparser_seq )
