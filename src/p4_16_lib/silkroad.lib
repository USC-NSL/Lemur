#
# Title: silkroad.lib
# This P4-16 module is a naive implementation of SilkRoad load balancer.
# SilkRoad [SIGCOMM 17'] is the first load balancer that ensures
# per-connection consistency in a programmable switch.
#
# This implementation does not compress rules. Therefore, it cannot
# serve millions of connections. Please see the full paper to see
# the comprehensive-implementation of SilkRoad LB.
#

default_prefix = silkroad

/*
 * P4 module marcos
 */
add macro(CONN_TABLE_SIZE, 50)
add macro(VIP_TABLE_SIZE, 50)
add macro(DIP_POOL_TABLE_SIZE, 50)

add_const(TYPE_IPV4, bit<16>, 0x0800)
add_const(TYPE_IPV6, bit<16>, 0x0816)
add_const(TYPE_TCP, bit<8>, 0x06)
add_const(TYPE_UDP, bit<8>, 0x11)

/*
 * Header Definition Part
 */
#define Ethernet
#define NSH
#define IPv4
#define TCP
#define UDP

/*
 * Metadata Definition Part
 */
add metadata(conn_table_miss_flag, bit<4>)
add metadata(vip_table_miss_flag, bit<4>)
add metadata(dip_pool_table_miss_flag, bit<4>)
add metadata(vipAddr, ip4Addr_t)
add metadata(dipAddr, ip4Addr_t)
add metadata(dip_pool_version, bit<32>)
add metadata(dip_select, bit<14>)

/*
 * P4 Header Parser Specification Part
 */
set Ethernet(etherType, 2, {TYPE_IPV4:IPv4, TYPE_IPV6:IPv6 })
set IPv4(protocol, 2, {TYPE_TCP:TCP, TYPE_UDP:UDP})
set IPv6(None, 0, {})
set NSH(None, 0, {})
set TCP(None, 0, {})
set UDP(None, 0, {})
add parser( Ethernet )


/*
 * Ingress Match/Action Table Part
 */
action init_metadata() {
	meta.conn_table_miss_flag = (bit<4>)0;
	meta.vip_table_miss_flag = (bit<4>)0;
	meta.dip_pool_table_miss_flag = (bit<4>)0;
}

action conn_table_hit(ip4Addr_t dipAddr) {
	hdr.ipv4.dstAddr = dipAddr;
}

action conn_table_miss() {
}

table conn_table {
	key = {
		hdr.ipv4.srcAddr: exact;
		hdr.ipv4.dstAddr: exact;
	}
	actions = {
		conn_table_hit;
		conn_table_miss;
		NoAction;
	}
	default_action = conn_table_miss();
	size = CONN_TABLE_SIZE;
}


// vip_table_hit(...) computes hash for the vip
action vip_table_hit(bit<32> dip_version) {
	meta.vipAddr = hdr.ipv4.dstAddr;
	meta.dip_pool_version = dip_version;
	meta.dip_select = 0;

	// set meta.dip_select as the hash value
	bit<16>hash_base = 0;
	bit<32>hash_count = 3;
	hash(meta.dip_select, HashAlgorithm.crc16, hash_base, 
	{hdr.ipv4.srcAddr, hdr.ipv4.dstAddr, hdr.ipv4.protocol, 
	hdr.tcp.srcPort, hdr.tcp.dstPort },
	hash_count);
}

action vip_table_miss() {
}

table vip_table {
	key = {
		hdr.ipv4.dstAddr: exact;
	}
	actions = {
		vip_table_hit;
		vip_table_miss;
	}
	default_action = vip_table_miss();
	size = VIP_TABLE_SIZE;
}

# dip_pool_table_hit stores the dipAddr result into the meta data field
action dip_pool_table_hit(ip4Addr_t dipAddr) {
	meta.dipAddr = dipAddr;
}

action dip_pool_table_miss() {
}

table dip_pool_table {
	key = {
		meta.vipAddr: exact;
		meta.dip_pool_version: exact;
		meta.dip_select: exact;
	}
	actions = {
		dip_pool_table_hit;
		dip_pool_table_miss;
	}
	default_action = dip_pool_table_miss();
	size = DIP_POOL_TABLE_SIZE;
}


apply {
	init_metadata();

	switch( conn_table.apply().action_run ) {
       	conn_table_hit: {
       		meta.conn_table_miss_flag = 0;
       	}
       	conn_table_miss: {
       		meta.conn_table_miss_flag = 1;
       		meta.controller_flag = 1;
       	}
    }

    if ( meta.conn_table_miss_flag == 1 ) {
    	switch( vip_table.apply().action_run ) {
    		vip_table_hit: {
    			meta.vip_table_miss_flag = 0;
    		}
    		vip_table_miss: {
    			meta.vip_table_miss_flag = 1;
    		}
    	}

    	if (meta.vip_table_miss_flag == 0) {
    		switch( dip_pool_table.apply().action_run ) {
    			dip_pool_table_hit: {
    				meta.dip_pool_table_miss_flag = 0;
    			}
    			dip_pool_table_miss: {
    				meta.dip_pool_table_miss_flag = 1;
    			}
    		}
    	}
    }

    if ( (meta.vip_table_miss_flag == 1) || (meta.dip_pool_table_miss_flag == 1) ) {
    	meta.drop_flag = 1;
    }

}


/*
 * Egress Match/Action Table Part
 */


/*
 * P4 Header Deparser Specification Part
 */
deparser_seq = [UDP, TCP, IPv4, NSH, Ethernet]
add deparser( deparser_seq )
