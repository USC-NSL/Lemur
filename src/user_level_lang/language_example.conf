
/* 
 * This is a dummy Lemur user-level config file.
 *
 * Lemur users can specify their target NF chains in Lemur's user-level
 * language. This file is an example config for testing the functionality
 * of Lemur P4 library parser.
 *
 */

/* Test Basic Data Types */
int_a = 10
float_b = 5.4
float_c = 0.3
string_d = 'abc fda'
string_e = "fhdklasjfk fdsap"
bool_f = False
bool_g = True

/*
 * Test nTuple
 */
tuple_a = { 'priority' : 0, 'filter': 'tcp src port 92', 'gate': 1}
tuple_b = {'dst_ip' : '1.0.1.1'}

/*
 * Test nList
 */
list_a = [1, '1', '1.0.1.1']
list_b = [ tuple_a, tuple_b, {'abc': 0} ]

/*
 * Test nlinkedlist
 * Note: in a linked list, each element must be either netfunction or a variable
 * which represents a netfunction
 *
 * Examples: 
 * ll_example = ttl -> IPv4Forward()
 */
linkedlist_a = a -> b -> c

/*
 * Network Function Configuration
 * Define NF instance / Define NF chain / configure NF chain with flowspec
 */
ttl = UpdateTTL()
traffic_1 = [{'src_ip' : '10.0.0.1'}]
traffic_2 = [{'dst_ip' : '1.1.1.1'}]
traffic_3 = [{'dst_ip' : '1.1.1.2'}]
traffic_4 = [{'dst_ip' : '1.1.1.3'}]

sp_0 = IPv4Forward()

sp_1 = ttl -> IPv4Forward()

sp_2 = SilkRoad() -> [ {'flowspec' : [{'src_ip' : '1.0.0.1'}], 'nfchain' : linkedlist_a}, { 'flowspec': traffic_1, 'nfchain': ttl -> IPv4Forward() }] -> abc()

chain_a = ACL() -> [{'flowspec':[{'src_ip' : '1.0.0.1'}], 'nfchain': ttl_1}, {'flowspec':[{'src_ip' : '1.0.0.1'}], 'nfchain': ttl_2 -> Encryption()}]

sp_3 = SilkRoad() -> IPv4Forward1() -> [ {'flowspec' : [{'src_ip' : '1.0.0.1'}], 'nfchain' : linkedlist_a}, { 'flowspec': traffic_1, 'nfchain': ttl -> IPv4Forward2() } , { 'flowspec': traffic_2, 'nfchain': Encryption() }] -> IPv4Forward4()

sp_4 = SilkRoad() -> IPv4Forward1() -> [ {'flowspec' : [{'src_ip' : '1.0.0.1'}], 'nfchain' : linkedlist_a}, { 'flowspec': traffic_1, 'nfchain': ttl_0 -> IPv4Forward2() } , { 'flowspec': traffic_2, 'nfchain': chain_a }] -> IPv4Forward4()

traffic_1 : sp_1
traffic_2 : sp_2
traffic_3 : sp_3
traffic_4 : sp_4
